class Solution(object):
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        is_pal = [[False] * n for _ in range(n)]
        
        # Precompute palindrome substrings
        for end in range(n):
            for start in range(end + 1):
                if s[start] == s[end] and (end - start < 2 or is_pal[start + 1][end - 1]):
                    is_pal[start][end] = True
        
        dp = [float('inf')] * n
        
        for i in range(n):
            if is_pal[0][i]:
                dp[i] = 0  # whole substring s[:i+1] is palindrome
            else:
                for j in range(1, i + 1):
                    if is_pal[j][i]:
                        dp[i] = min(dp[i], dp[j - 1] + 1)
        
        return dp[-1]
